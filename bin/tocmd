#!/usr/bin/env ruby  
# encoding: utf-8

require 'tocmd'  
require 'pathname'
require 'optparse'

# File.join(File.dirname(__FILE__), '..', 'lib')
path = Pathname.new(File.join(File.dirname(__FILE__), '..')).realpath.to_s

options = {}
option_parser = OptionParser.new do |opts|
  # 这里是这个命令行工具的帮助信息
  opts.banner = 'preview markdown file  with toc of the command line tool.'

  # # Option 作为switch，不带argument，用于将switch设置成true或false
  # options[:switch] = false
  # # 下面第一项是Short option（没有可以直接在引号间留空），第二项是Long option，第三项是对Option的描述
  # opts.on('-s', '--switch', 'Set options as switch') do
  #   # 这个部分就是使用这个Option后执行的代码
  #   options[:switch] = true
  # end
  vendor_path =  Pathname.new(File.expand_path('../../vendor/', __FILE__)).realpath.to_s  

  src_p = Dir.pwd
	
	begin  
		Dir.delelte(File.join(src_p ,"preview"))
		Dir.mkdir(File.join(src_p ,"preview"), 0700) #=> 0
	rescue  
	ensure   
	end 
	
	begin  
		Dir.mkdir(File.join(src_p ,"preview"), 0700) #=> 0
	rescue  
	ensure   
	end 
  
  # Option 作为flag，带argument，用于将argument作为数值解析，比如"name"信息
  #下面的“value”就是用户使用时输入的argument
  opts.on('-f sourceFileNAME', '--file sourceFileNAME', 'Pass-in source file name') do |value|
    options[:fname] = src_p + '/' + value
  end
	
  # 目录参数
  opts.on('-d sourceDirNAME', '--directory sourceDirNAME', 'Pass-in source directory name') do |value|
		options[:dname] = value == '.' ? (src_p + '/') : (src_p + '/' + value)    
  end

  # 是否需要浏览器打开参数
  opts.on('', '--no-browser', 'Not open with browser after translate') do |_value|
  	Tocmd.set_no_browser(true)
  end
end.parse!

if options.has_key?(:fname) && !options[:fname].nil? && options[:fname] != ''
  Tocmd.hi(options[:fname])
end

if options.has_key?(:dname) && !options[:dname].nil? && options[:dname] != ''
  Tocmd.hi_dir(options[:dname])
end
